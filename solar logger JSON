// -------------------------------------------------------------
// Log voltage of Tortuga off-grid solar system lead-acid battery
/* -------------------------------------------------------------



------------------------------------------*/

int led = D6;
int boardLed = D7;
int battery = A0;
int relay = A1;
unsigned long ADC0 = 0;
unsigned long ADC1 = 0;
double voltage;
bool bypass;
int nowRead;
int nowPublish;
const int delayBetweenReads = 5; // in seconds
const int delayBetweenPublish = 60; // in seconds
bool timeToRead = true;
bool timeToPublish = false;
int readNumber = 0;

// We start with the setup function.

void setup()
{
	// pin outputs
	pinMode(led, OUTPUT);	   // Our LED pin is output (lighting up the LED)
	pinMode(boardLed, OUTPUT); // Our on-board LED is output as well
	// set now to now
	nowRead = Time.now();
	nowPublish = Time.now();

}


void loop()
{
	if (timeToRead) {
	    // Read the voltage and add it to the running total to be divided by readNumber later
	    ADC0 = analogRead(battery) + ADC0;
	    // Read the voltage on the relay and add it to the running total to be divided by readNumber later 
	    ADC1 = analogRead(relay) + ADC1;
	    readNumber++;
	    timeToRead = false;
	}
	
	if (Time.now() >= (nowRead + delayBetweenReads)) {
	    timeToRead = true;
	    nowRead = Time.now();
	}
	
	if (Time.now() >= (nowPublish + delayBetweenPublish)) {
	    timeToPublish = true;
	    nowPublish = Time.now();
	}
	
	if (timeToPublish && readNumber > 0) {
	    // average the voltage readings by dividing by the readNumber and multiply by the ADC to voltage factor of 0.0156
	    // ADC is 0 to 4095 of 3.3 v; 1.1 kOhm / 20 KOhm voltage divider
	    voltage = (double)ADC0*0.01560/(double)readNumber;
	    
	    // average the voltage on ADC1 by dividing the running total by readNumber 
	    // If ADC1 is above 3000 assume the pin is high, the relay is open, and bypass is false; if below 3000 assume pin is low,
	    // relay is closed, and bypass is true
	    
	    
	    if (ADC1/readNumber > 3000 ) { bypass = false;
	    } else if (ADC1/readNumber <= 3000) { bypass = true;
	    }
	    
	    
	    // Put the data into JSON
	    char buf[256];
        JSONBufferWriter writer(buf, sizeof(buf));
        writer.beginObject();
        writer.name("voltage").value(voltage);
        writer.name("bypass").value(bypass);
        writer.name("ADC1").value(ADC1);
        writer.name("ADC1 / readNumber").value(ADC1/readNumber);
        writer.name("Analog 1").value(analogRead(relay));
        writer.name("readNumber").value(readNumber);
        writer.endObject();
        writer.buffer()[std::min(writer.bufferSize(), writer.dataSize())] = 0;
	    
	    //Check is Particle is connected and then publish
	    if (Particle.connected()) {
	       Particle.publish("data", buf); 
	       Log.info("published %s", buf);
	    }
	    
	    // reset readNumber, ADC0, ADC1, and set timeToPublish to false
	    ADC1 = 0;
	    ADC0 = 0;
	    readNumber = 0;
	    timeToPublish = false;

	}
	 
	
}
